-- CREATE TYPE season_stats AS (
-- season INTEGER,
-- 	gp INTEGER,
-- 	pts real,
-- 	reb real,
-- 	ast real
-- 	);

-- CREATE TYPE scoring_class AS
--     ENUM ('bad', 'average', 'good', 'star');

CREATE TABLE players (
	player_name TEXT,
	height TEXT,
	college TEXT,
	country TEXT,
	draft_year TEXT,
	draft_round TEXT,
	draft_number TEXT,
	season_stats season_stats[],
	scoring_class scoring_class,
	years_since_last_season INTEGER,
	current_season INTEGER,
	is_active BOOLEAN,
	primary KEY(player_name, current_season)
);

insert into players
with yesterday as (
select * from players
where current_season = 1995
),
 today as (
 select * from player_seasons
where season = 1996
 )
 select
	 COALESCE(t.player_name, y.player_name) as player_name,
	 COALESCE(t.height, y.height) as height,
	 COALESCE(t.college, y.college) as college,
	 COALESCE(t.country, y.country) as country,
	 COALESCE(t.draft_year, y.draft_year) as draft_year,
	 COALESCE(t.draft_round, y.draft_round) as draft_round,
	 COALESCE(t.draft_number, y.draft_number) as draft_number,
	 case when y.season_stats is null 
	 then ARRAY[row(
	 t.season,
	 t.gp, 
	 t.pts, 
	t.reb, 
	t.ast
	 )::season_stats]
	 when t.season is not null then y.season_stats || ARRAY[row(
	 t.season,
	 t.gp, 
	 t.pts, 
	t.reb, 
	t.ast
	 )::season_stats]
	 else y.season_stats
	 end as season_stats,
	 
	 CASE WHEN t.season is not null then 
	 		CASE WHEN t.pts > 20 THEN 'star'
			 	WHEN t.pts > 15 THEN 'good'
				 WHEN t.pts > 10 THEN 'average'
				 ELSE 'bad'
		END::scoring_class 
	 END,
	 CASE WHEN t.season is not null then 0
	 ELSE COALESCE(y.years_since_last_season,0)+1
	 END as years_since_last_season,
	 t.season IS NOT NULL as is_active,
	 COALESCE(t.season, y.current_season + 1) as current_season
		 
 from today t full outer join yesterday y 
 on t.player_name = y.player_name
 
--  SELECT *
--  FROM players
--  WHERE current_season = 2001
--  AND player_name = 'Michael Jordan'
--  ;

-- WITH unnested as(
--   SELECT player_name
--   ,scoring_class
--   ,UNNEST(season_stats)::season_stats AS season_stats
--  FROM players
--  WHERE current_season = 2001
--  -- AND player_name = 'Michael Jordan'
--  )
--  SELECT player_name, scoring_class,
--  (season_stats::season_stats).*
--  FROM unnested
--  ;

-- /*cardinality is the function to find the number of objects in the array returns the number of elements in the array*/
--  SELECT player_name
--  ,(season_stats[CARDINALITY(season_stats)]::season_stats).pts/
-- CASE WHEN (season_stats[1]::season_stats).pts = 0 THEN 1 ELSE (season_stats[1]::season_stats).pts
-- END AS perf
-- FROM players
-- WHERE current_season=2001
-- AND scoring_class='star';

